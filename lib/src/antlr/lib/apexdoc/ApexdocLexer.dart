// Generated from lib/src/antlr/grammars/apexdoc/ApexdocLexer.g4 by ANTLR 4.13.2
// ignore_for_file: unused_import, unused_local_variable, prefer_single_quotes
import 'package:antlr4/antlr4.dart';


class ApexdocLexer extends Lexer {
  static final checkVersion = () => RuntimeMetaData.checkVersion('4.13.2', RuntimeMetaData.VERSION);

  static final List<DFA> _decisionToDFA = List.generate(
        _ATN.numberOfDecisions, (i) => DFA(_ATN.getDecisionState(i), i));
  static final PredictionContextCache _sharedContextCache = PredictionContextCache();
  static const int
    TOKEN_PARAM = 1, TOKEN_RETURN = 2, TOKEN_EXAMPLE = 3, TOKEN_THROWS = 4, 
    TOKEN_EXCEPTION = 5, TOKEN_NAME = 6, TOKEN_JavaLetterOrDigit = 7, TOKEN_NEWLINE = 8, 
    TOKEN_SPACE = 9, TOKEN_TEXT_CONTENT = 10, TOKEN_TICKED_CONTENT = 11, 
    TOKEN_AT = 12, TOKEN_STAR = 13, TOKEN_SLASH = 14, TOKEN_DOT = 15, TOKEN_TICK = 16, 
    TOKEN_JAVADOC_START = 17, TOKEN_JAVADOC_END = 18, TOKEN_INLINE_TAG_START = 19, 
    TOKEN_BRACE_OPEN = 20, TOKEN_BRACE_CLOSE = 21;
  @override
  final List<String> channelNames = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  @override
  final List<String> modeNames = [
    'DEFAULT_MODE'
  ];

  @override
  final List<String> ruleNames = [
    'PARAM', 'RETURN', 'EXAMPLE', 'THROWS', 'EXCEPTION', 'NAME', 'JavaLetter', 
    'JavaLetterOrDigit', 'NEWLINE', 'SPACE', 'TEXT_CONTENT', 'TICKED_CONTENT', 
    'AT', 'STAR', 'SLASH', 'DOT', 'TICK', 'JAVADOC_START', 'JAVADOC_END', 
    'INLINE_TAG_START', 'BRACE_OPEN', 'BRACE_CLOSE', 'A', 'B', 'C', 'D', 
    'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 
    'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'
  ];

  static final List<String?> _LITERAL_NAMES = [
      null, null, null, null, null, null, null, null, null, null, null, 
      null, "'@'", "'*'", "'/'", "'.'", "'`'", null, null, "'{@'", "'{'", 
      "'}'"
  ];
  static final List<String?> _SYMBOLIC_NAMES = [
      null, "PARAM", "RETURN", "EXAMPLE", "THROWS", "EXCEPTION", "NAME", 
      "JavaLetterOrDigit", "NEWLINE", "SPACE", "TEXT_CONTENT", "TICKED_CONTENT", 
      "AT", "STAR", "SLASH", "DOT", "TICK", "JAVADOC_START", "JAVADOC_END", 
      "INLINE_TAG_START", "BRACE_OPEN", "BRACE_CLOSE"
  ];
  static final Vocabulary VOCABULARY = VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

  @override
  Vocabulary get vocabulary {
    return VOCABULARY;
  }


  ApexdocLexer(CharStream input) : super(input) {
    interpreter = LexerATNSimulator(_ATN, _decisionToDFA, _sharedContextCache, recog: this);
  }

  @override
  List<int> get serializedATN => _serializedATN;

  @override
  String get grammarFileName => 'ApexdocLexer.g4';

  @override
  ATN getATN() { return _ATN; }

  static const List<int> _serializedATN = [
      4,0,21,275,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
      6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
      13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
      7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
      27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,
      2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,
      40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,
      7,47,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
      2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
      1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,5,5,143,8,5,10,
      5,12,5,146,9,5,1,6,1,6,1,6,1,6,3,6,152,8,6,1,7,1,7,1,7,1,7,3,7,158,
      8,7,1,8,1,8,1,8,1,8,3,8,164,8,8,1,9,4,9,167,8,9,11,9,12,9,168,1,10,
      4,10,172,8,10,11,10,12,10,173,1,11,1,11,5,11,178,8,11,10,11,12,11,
      181,9,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,
      16,1,17,1,17,1,17,1,17,1,17,5,17,200,8,17,10,17,12,17,203,9,17,1,18,
      3,18,206,8,18,1,18,5,18,209,8,18,10,18,12,18,212,9,18,1,18,1,18,1,
      18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,
      1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,
      31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,
      1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,
      45,1,45,1,46,1,46,1,47,1,47,0,0,48,1,1,3,2,5,3,7,4,9,5,11,6,13,0,15,
      7,17,8,19,9,21,10,23,11,25,12,27,13,29,14,31,15,33,16,35,17,37,18,
      39,19,41,20,43,21,45,0,47,0,49,0,51,0,53,0,55,0,57,0,59,0,61,0,63,
      0,65,0,67,0,69,0,71,0,73,0,75,0,77,0,79,0,81,0,83,0,85,0,87,0,89,0,
      91,0,93,0,95,0,1,0,33,6,0,36,36,45,45,48,57,65,90,95,95,97,122,2,0,
      0,255,55296,56319,1,0,55296,56319,1,0,56320,57343,3,0,9,10,12,13,32,
      32,8,0,9,10,13,13,32,32,42,42,47,47,64,90,97,123,125,125,3,0,10,10,
      13,13,96,96,2,0,65,65,97,97,2,0,66,66,98,98,2,0,67,67,99,99,2,0,68,
      68,100,100,2,0,69,69,101,101,2,0,70,70,102,102,2,0,71,71,103,103,2,
      0,72,72,104,104,2,0,73,73,105,105,2,0,74,74,106,106,2,0,75,75,107,
      107,2,0,76,76,108,108,2,0,77,77,109,109,2,0,78,78,110,110,2,0,79,79,
      111,111,2,0,80,80,112,112,2,0,81,81,113,113,2,0,82,82,114,114,2,0,
      83,83,115,115,2,0,84,84,116,116,2,0,85,85,117,117,2,0,86,86,118,118,
      2,0,87,87,119,119,2,0,88,88,120,120,2,0,89,89,121,121,2,0,90,90,122,
      122,260,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
      0,0,11,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
      0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
      33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
      1,0,0,0,1,97,1,0,0,0,3,104,1,0,0,0,5,112,1,0,0,0,7,121,1,0,0,0,9,129,
      1,0,0,0,11,140,1,0,0,0,13,151,1,0,0,0,15,157,1,0,0,0,17,163,1,0,0,
      0,19,166,1,0,0,0,21,171,1,0,0,0,23,175,1,0,0,0,25,184,1,0,0,0,27,186,
      1,0,0,0,29,188,1,0,0,0,31,190,1,0,0,0,33,192,1,0,0,0,35,194,1,0,0,
      0,37,205,1,0,0,0,39,216,1,0,0,0,41,219,1,0,0,0,43,221,1,0,0,0,45,223,
      1,0,0,0,47,225,1,0,0,0,49,227,1,0,0,0,51,229,1,0,0,0,53,231,1,0,0,
      0,55,233,1,0,0,0,57,235,1,0,0,0,59,237,1,0,0,0,61,239,1,0,0,0,63,241,
      1,0,0,0,65,243,1,0,0,0,67,245,1,0,0,0,69,247,1,0,0,0,71,249,1,0,0,
      0,73,251,1,0,0,0,75,253,1,0,0,0,77,255,1,0,0,0,79,257,1,0,0,0,81,259,
      1,0,0,0,83,261,1,0,0,0,85,263,1,0,0,0,87,265,1,0,0,0,89,267,1,0,0,
      0,91,269,1,0,0,0,93,271,1,0,0,0,95,273,1,0,0,0,97,98,3,25,12,0,98,
      99,3,75,37,0,99,100,3,45,22,0,100,101,3,79,39,0,101,102,3,45,22,0,
      102,103,3,69,34,0,103,2,1,0,0,0,104,105,3,25,12,0,105,106,3,79,39,
      0,106,107,3,53,26,0,107,108,3,83,41,0,108,109,3,85,42,0,109,110,3,
      79,39,0,110,111,3,71,35,0,111,4,1,0,0,0,112,113,3,25,12,0,113,114,
      3,53,26,0,114,115,3,91,45,0,115,116,3,45,22,0,116,117,3,69,34,0,117,
      118,3,75,37,0,118,119,3,67,33,0,119,120,3,53,26,0,120,6,1,0,0,0,121,
      122,3,25,12,0,122,123,3,83,41,0,123,124,3,59,29,0,124,125,3,79,39,
      0,125,126,3,73,36,0,126,127,3,89,44,0,127,128,3,81,40,0,128,8,1,0,
      0,0,129,130,3,25,12,0,130,131,3,53,26,0,131,132,3,91,45,0,132,133,
      3,49,24,0,133,134,3,53,26,0,134,135,3,75,37,0,135,136,3,83,41,0,136,
      137,3,61,30,0,137,138,3,73,36,0,138,139,3,71,35,0,139,10,1,0,0,0,140,
      144,3,13,6,0,141,143,3,15,7,0,142,141,1,0,0,0,143,146,1,0,0,0,144,
      142,1,0,0,0,144,145,1,0,0,0,145,12,1,0,0,0,146,144,1,0,0,0,147,152,
      7,0,0,0,148,152,8,1,0,0,149,150,7,2,0,0,150,152,7,3,0,0,151,147,1,
      0,0,0,151,148,1,0,0,0,151,149,1,0,0,0,152,14,1,0,0,0,153,158,7,0,0,
      0,154,158,8,1,0,0,155,156,7,2,0,0,156,158,7,3,0,0,157,153,1,0,0,0,
      157,154,1,0,0,0,157,155,1,0,0,0,158,16,1,0,0,0,159,164,5,10,0,0,160,
      161,5,13,0,0,161,164,5,10,0,0,162,164,5,13,0,0,163,159,1,0,0,0,163,
      160,1,0,0,0,163,162,1,0,0,0,164,18,1,0,0,0,165,167,7,4,0,0,166,165,
      1,0,0,0,167,168,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,20,1,0,
      0,0,170,172,8,5,0,0,171,170,1,0,0,0,172,173,1,0,0,0,173,171,1,0,0,
      0,173,174,1,0,0,0,174,22,1,0,0,0,175,179,5,96,0,0,176,178,8,6,0,0,
      177,176,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,
      182,1,0,0,0,181,179,1,0,0,0,182,183,5,96,0,0,183,24,1,0,0,0,184,185,
      5,64,0,0,185,26,1,0,0,0,186,187,5,42,0,0,187,28,1,0,0,0,188,189,5,
      47,0,0,189,30,1,0,0,0,190,191,5,46,0,0,191,32,1,0,0,0,192,193,5,96,
      0,0,193,34,1,0,0,0,194,195,5,47,0,0,195,196,5,42,0,0,196,197,5,42,
      0,0,197,201,1,0,0,0,198,200,3,27,13,0,199,198,1,0,0,0,200,203,1,0,
      0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,36,1,0,0,0,203,201,1,0,0,0,
      204,206,3,19,9,0,205,204,1,0,0,0,205,206,1,0,0,0,206,210,1,0,0,0,207,
      209,3,27,13,0,208,207,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,
      211,1,0,0,0,211,213,1,0,0,0,212,210,1,0,0,0,213,214,5,42,0,0,214,215,
      5,47,0,0,215,38,1,0,0,0,216,217,5,123,0,0,217,218,5,64,0,0,218,40,
      1,0,0,0,219,220,5,123,0,0,220,42,1,0,0,0,221,222,5,125,0,0,222,44,
      1,0,0,0,223,224,7,7,0,0,224,46,1,0,0,0,225,226,7,8,0,0,226,48,1,0,
      0,0,227,228,7,9,0,0,228,50,1,0,0,0,229,230,7,10,0,0,230,52,1,0,0,0,
      231,232,7,11,0,0,232,54,1,0,0,0,233,234,7,12,0,0,234,56,1,0,0,0,235,
      236,7,13,0,0,236,58,1,0,0,0,237,238,7,14,0,0,238,60,1,0,0,0,239,240,
      7,15,0,0,240,62,1,0,0,0,241,242,7,16,0,0,242,64,1,0,0,0,243,244,7,
      17,0,0,244,66,1,0,0,0,245,246,7,18,0,0,246,68,1,0,0,0,247,248,7,19,
      0,0,248,70,1,0,0,0,249,250,7,20,0,0,250,72,1,0,0,0,251,252,7,21,0,
      0,252,74,1,0,0,0,253,254,7,22,0,0,254,76,1,0,0,0,255,256,7,23,0,0,
      256,78,1,0,0,0,257,258,7,24,0,0,258,80,1,0,0,0,259,260,7,25,0,0,260,
      82,1,0,0,0,261,262,7,26,0,0,262,84,1,0,0,0,263,264,7,27,0,0,264,86,
      1,0,0,0,265,266,7,28,0,0,266,88,1,0,0,0,267,268,7,29,0,0,268,90,1,
      0,0,0,269,270,7,30,0,0,270,92,1,0,0,0,271,272,7,31,0,0,272,94,1,0,
      0,0,273,274,7,32,0,0,274,96,1,0,0,0,11,0,144,151,157,163,168,173,179,
      201,205,210,0
  ];

  static final ATN _ATN =
      ATNDeserializer().deserialize(_serializedATN);
}